<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#+

	public static class MyDbConfig
    {
        // public static readonly string ConnectionString = "Provider=SQLOLEDB.1;Password=123456;Persist Security Info=True;User ID=sa;Data Source=(local)";
		public static readonly string ConnectionString = "Data Source=.;User ID=sa;Password=123456;Persist Security Info=True;Provider=SQLOLEDB.1;";
        public static readonly string DbDatabase = "CMS";
        public static readonly string TableName = "Sys_Menu"; // 多表以逗号分隔，空则生成全部
    }

    public static class DbHelper
    {
        #region GetDbTables
        
		public static List<DbTable> GetDbTableAll(string connectionString, string database)
		{
			return GetDbTables(connectionString, database);
		}

        public static List<DbTable> GetDbTables(string connectionString, string database, string tables = null)
        {

            if (!string.IsNullOrEmpty(tables))
            {
                tables = string.Format(" AND obj.name IN ('{0}')", tables.Replace(",", "','"));
            }
            #region SQL
            string sql = string.Format(
@"SELECT obj.name tablename, schem.name schemname, idx.rows,
		CAST(
		    CASE 
				WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 
				THEN 1 ELSE 0
		    END AS bit
		) IsHasPrimaryKey                                         
	FROM {0}.sys.objects obj 
		INNER JOIN {0}.dbo.sysindexes idx ON obj.object_id=idx.id AND idx.indid<=1
		INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
	WHERE type='U' {1}
	ORDER BY obj.name", database, tables);
            #endregion

            DataTable dt = GetDataTable(connectionString, sql);
			return dt.Rows.Cast<DataRow>().Select(row => new DbTable
			{
			    TableName = row.Field<string>("tablename"),
			    SchemaName = row.Field<string>("schemname"),
			    Rows = row.Field<int>("rows"),
			    IsHasPrimaryKey = row.Field<bool>("IsHasPrimaryKey")
			}).ToList();
        }
        #endregion

        #region GetDbColumns
        
        public static List<DbColumn> GetDbColumns(string connectionString, string database, string tableName, string schema = "dbo")
        {
            #region SQL
            string sql = string.Format(
@"WITH indexCTE AS
(
    SELECT ic.column_id, ic.index_column_id, ic.object_id    
		FROM {0}.sys.indexes idx
			INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
		WHERE idx.object_id=OBJECT_ID('{1}') AND idx.is_primary_key=1
)
SELECT colm.column_id ColumnID, colm.name ColumnName, systype.name ColumnType,
		colm.is_identity IsIdentity, colm.is_nullable IsNullable, prop.value Remark,
		CASE 
			WHEN systype.name='nvarchar' AND colm.max_length>0 THEN colm.max_length/2 
			WHEN systype.name='nchar' and colm.max_length>0 then colm.max_length/2
			WHEN systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
			ELSE colm.max_length
		END AS CharLength,
		CAST(
			CASE 
				WHEN indexCTE.column_id IS NULL 
				THEN 0 ELSE 1 
			END AS bit
		) IsPrimaryKey,
		CAST(colm.max_length as int) ByteLength,
		CAST(colm.precision as int) Precision,
		CAST(colm.scale as int) Scale
	FROM {0}.sys.columns colm
		INNER JOIN {0}.sys.types systype ON colm.system_type_id=systype.system_type_id AND colm.user_type_id=systype.user_type_id
		LEFT JOIN {0}.sys.extended_properties prop ON colm.object_id=prop.major_id and colm.column_id=prop.minor_id
		LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
	WHERE colm.object_id=OBJECT_ID('{1}')
	ORDER BY colm.column_id", database, string.Format("{0}.{1}.{2}", database, schema, tableName));
            #endregion
            //OleDbParameter[] dbparams = new OleDbParameter[]
			//{ 
			//	new OleDbParameter("@tableName", OleDbType.VarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) }
			//};
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn()
            {
                ColumnID = row.Field<int>("ColumnID"),
                IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
                ColumnName = row.Field<string>("ColumnName"),
                ColumnType = row.Field<string>("ColumnType"),
                IsIdentity = row.Field<bool>("IsIdentity"),
                IsNullable = row.Field<bool>("IsNullable"),
                ByteLength = row.Field<int>("ByteLength"),
                CharLength = row.Field<int>("CharLength"),
                Scale = row.Field<int>("Scale"),
                Remark = row["Remark"].ToString()
            }).ToList();
        }

        #endregion
    }

	#region GetDataTable
        
        public static DataTable GetDataTable(string connectionString, string commandText, OleDbParameter[] dbparams = null)
        {
			DataTable dataTable = new DataTable();
            OleDbDataAdapter adapter = null;
            try
            {
				using (OleDbConnection connection = new OleDbConnection(connectionString))
				{
				    connection.Open();
				    OleDbCommand command = connection.CreateCommand();
				    command.CommandText = commandText;
				    command.CommandType = CommandType.Text;
				    if (dbparams != null && dbparams.Length > 0)
				    {
				        command.Parameters.AddRange(dbparams);
				    }
				    adapter = new OleDbDataAdapter(command);
				    adapter.Fill(dataTable);
				}
            }
            catch (OleDbException exception)
            {
                
            }
            finally
            {
                adapter.Dispose();
            }
            return dataTable;
        }

        #endregion

    #region DbTable

    /// <summary>
    /// 表结构
    /// </summary>
    public sealed class DbTable
    {
        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }
        /// <summary>
        /// 表的架构
        /// </summary>
        public string SchemaName { get; set; }
        /// <summary>
        /// 表的记录数
        /// </summary>
        public int Rows { get; set; }
        /// <summary>
        /// 是否含有主键
        /// </summary>
        public bool IsHasPrimaryKey { get; set; }
    }
    #endregion

    #region DbColumn
    /// <summary>
    /// 表字段结构
    /// </summary>
    public sealed class DbColumn
    {
        /// <summary>
        /// 字段ID
        /// </summary>
        public int ColumnID { get; set; }
        /// <summary>
        /// 是否主键
        /// </summary>
        public bool IsPrimaryKey { get; set; }
        /// <summary>
        /// 字段名称
        /// </summary>
        public string ColumnName { get; set; }
        /// <summary>
        /// 字段类型
        /// </summary>
        public string ColumnType { get; set; }
        /// <summary>
        /// 数据库类型对应的C#类型
        /// </summary>
        public string CSharpType
        {
            get
            {
                return SqlServerDbTypeMap.MapCsharpType(ColumnType);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Type CommonType
        {
            get
            {
                return SqlServerDbTypeMap.MapCommonType(ColumnType);
            }
        }

        /// <summary>
        /// 字节长度
        /// </summary>
        public int ByteLength { get; set; }

        /// <summary>
        /// 字符长度
        /// </summary>
        public int CharLength { get; set; }

        /// <summary>
        /// 小数位
        /// </summary>
        public int Scale { get; set; }

        /// <summary>
        /// 是否自增列
        /// </summary>
        public bool IsIdentity { get; set; }

        /// <summary>
        /// 是否允许空
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public string Remark { get; set; }
    }
    #endregion

    #region SqlServerDbTypeMap

    public class SqlServerDbTypeMap
    {
        public static string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }
           
        public static Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }
    }
    #endregion
    
#>